// This file is auto generated by modelgen tool
// Do not edit this file manually

package contivModel

import (
	"errors"
	"net/http"
	"encoding/json"
	"github.com/contiv/symphony/pkg/confStore/modeldb"
	"github.com/gorilla/mux"
	log "github.com/Sirupsen/logrus"
)

type HttpApiFunc func(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error)

type App struct {
	Key		string		`json:"key,omitempty"`
	AppName	string		`json:"appName,omitempty"`
	TenantName	string		`json:"tenantName,omitempty"`
	LinkSets	AppLinkSets		`json:"link-sets,omitempty"`
	Links	AppLinks		`json:"links,omitempty"`
}

type AppLinkSets struct {
	Services	map[string]modeldb.Link		`json:"services,omitempty"`
}

type AppLinks struct {
	Tenant	modeldb.Link		`json:"tenant,omitempty"`
}

type EndpointGroup struct {
	Key		string		`json:"key,omitempty"`
	GroupName	string		`json:"groupName,omitempty"`
	TenantName	string		`json:"tenantName,omitempty"`
	NetworkName	string		`json:"networkName,omitempty"`
	Policies	[]string		`json:"policies,omitempty"`
	LinkSets	EndpointGroupLinkSets		`json:"link-sets,omitempty"`
	Links	EndpointGroupLinks		`json:"links,omitempty"`
}

type EndpointGroupLinkSets struct {
	Services	map[string]modeldb.Link		`json:"services,omitempty"`
	Policies	map[string]modeldb.Link		`json:"policies,omitempty"`
}

type EndpointGroupLinks struct {
	Tenant	modeldb.Link		`json:"tenant,omitempty"`
	Network	modeldb.Link		`json:"network,omitempty"`
}

type Network struct {
	Key		string		`json:"key,omitempty"`
	NetworkName	string		`json:"networkName,omitempty"`
	TenantName	string		`json:"tenantName,omitempty"`
	IsPublic	bool		`json:"isPublic,omitempty"`
	IsPrivate	bool		`json:"isPrivate,omitempty"`
	Encap	string		`json:"encap,omitempty"`
	Subnet	string		`json:"subnet,omitempty"`
	Links	NetworkLinks		`json:"links,omitempty"`
}

type NetworkLinks struct {
	Tenant	modeldb.Link		`json:"tenant,omitempty"`
}

type Policy struct {
	Key		string		`json:"key,omitempty"`
	PolicyName	string		`json:"policyName,omitempty"`
	TenantName	string		`json:"tenantName,omitempty"`
	Rules	[]string		`json:"rules,omitempty"`
	LinkSets	PolicyLinkSets		`json:"link-sets,omitempty"`
	Links	PolicyLinks		`json:"links,omitempty"`
}

type PolicyLinkSets struct {
	EndpointGroups	map[string]modeldb.Link		`json:"endpointGroups,omitempty"`
}

type PolicyLinks struct {
	Tenant	modeldb.Link		`json:"tenant,omitempty"`
}

type Service struct {
	Key		string		`json:"key,omitempty"`
	ImageName	string		`json:"imageName,omitempty"`
	Cpu	int64		`json:"cpu,omitempty"`
	Memory	string		`json:"memory,omitempty"`
	Scale	int64		`json:"scale,omitempty"`
	Networks	[]string		`json:"networks,omitempty"`
	ServiceName	string		`json:"serviceName,omitempty"`
	AppName	string		`json:"appName,omitempty"`
	TenantName	string		`json:"tenantName,omitempty"`
	LinkSets	ServiceLinkSets		`json:"link-sets,omitempty"`
	Links	ServiceLinks		`json:"links,omitempty"`
}

type ServiceLinkSets struct {
	Instances	map[string]modeldb.Link		`json:"instances,omitempty"`
	Networks	map[string]modeldb.Link		`json:"networks,omitempty"`
}

type ServiceLinks struct {
	Tenant	modeldb.Link		`json:"tenant,omitempty"`
	App	modeldb.Link		`json:"app,omitempty"`
	EndpointGroup	modeldb.Link		`json:"endpointGroup,omitempty"`
}

type ServiceInstance struct {
	Key		string		`json:"key,omitempty"`
	InstanceID	string		`json:"instanceId,omitempty"`
	TenantName	string		`json:"tenantName,omitempty"`
	AppName	string		`json:"appName,omitempty"`
	ServiceName	string		`json:"serviceName,omitempty"`
	Volumes	[]string		`json:"volumes,omitempty"`
	LinkSets	ServiceInstanceLinkSets		`json:"link-sets,omitempty"`
	Links	ServiceInstanceLinks		`json:"links,omitempty"`
}

type ServiceInstanceLinkSets struct {
	Volumes	map[string]modeldb.Link		`json:"volumes,omitempty"`
}

type ServiceInstanceLinks struct {
	Tenant	modeldb.Link		`json:"tenant,omitempty"`
	Services	modeldb.Link		`json:"services,omitempty"`
}

type Tenant struct {
	Key		string		`json:"key,omitempty"`
	Name	string		`json:"name,omitempty"`
	LinkSets	TenantLinkSets		`json:"link-sets,omitempty"`
}

type TenantLinkSets struct {
	Volumes	map[string]modeldb.Link		`json:"volumes,omitempty"`
	Networks	map[string]modeldb.Link		`json:"networks,omitempty"`
	Apps	map[string]modeldb.Link		`json:"apps,omitempty"`
	EndpointGroups	map[string]modeldb.Link		`json:"endpointGroups,omitempty"`
	Policies	map[string]modeldb.Link		`json:"policies,omitempty"`
}

type Volume struct {
	Key		string		`json:"key,omitempty"`
	VolumeName	string		`json:"volumeName,omitempty"`
	TenantName	string		`json:"tenantName,omitempty"`
	Size	string		`json:"size,omitempty"`
	LinkSets	VolumeLinkSets		`json:"link-sets,omitempty"`
	Links	VolumeLinks		`json:"links,omitempty"`
}

type VolumeLinkSets struct {
	ServiceInstances	map[string]modeldb.Link		`json:"serviceInstances,omitempty"`
}

type VolumeLinks struct {
	Tenant	modeldb.Link		`json:"tenant,omitempty"`
}



type Collections struct {
	apps    map[string]*App
	endpointGroups    map[string]*EndpointGroup
	networks    map[string]*Network
	policys    map[string]*Policy
	services    map[string]*Service
	serviceInstances    map[string]*ServiceInstance
	tenants    map[string]*Tenant
	volumes    map[string]*Volume
}

var collections Collections

type Callbacks interface {
	AppCreate(app *App) error
	AppDelete(app *App) error
	EndpointGroupCreate(endpointGroup *EndpointGroup) error
	EndpointGroupDelete(endpointGroup *EndpointGroup) error
	NetworkCreate(network *Network) error
	NetworkDelete(network *Network) error
	PolicyCreate(policy *Policy) error
	PolicyDelete(policy *Policy) error
	ServiceCreate(service *Service) error
	ServiceDelete(service *Service) error
	ServiceInstanceCreate(serviceInstance *ServiceInstance) error
	ServiceInstanceDelete(serviceInstance *ServiceInstance) error
	TenantCreate(tenant *Tenant) error
	TenantDelete(tenant *Tenant) error
	VolumeCreate(volume *Volume) error
	VolumeDelete(volume *Volume) error
}

var objCallbackHandler Callbacks


func Init(handler Callbacks) {
objCallbackHandler = handler

	collections.apps = make(map[string]*App)
	collections.endpointGroups = make(map[string]*EndpointGroup)
	collections.networks = make(map[string]*Network)
	collections.policys = make(map[string]*Policy)
	collections.services = make(map[string]*Service)
	collections.serviceInstances = make(map[string]*ServiceInstance)
	collections.tenants = make(map[string]*Tenant)
	collections.volumes = make(map[string]*Volume)

	restoreApp()
	restoreEndpointGroup()
	restoreNetwork()
	restorePolicy()
	restoreService()
	restoreServiceInstance()
	restoreTenant()
	restoreVolume()
}


// Simple Wrapper for http handlers
func makeHttpHandler(handlerFunc HttpApiFunc) http.HandlerFunc {
	// Create a closure and return an anonymous function
	return func(w http.ResponseWriter, r *http.Request) {
		// Call the handler
		resp, err := handlerFunc(w, r, mux.Vars(r))
		if err != nil {
			// Log error
			log.Errorf("Handler for %s %s returned error: %s", r.Method, r.URL, err)

			// Send HTTP response
			http.Error(w, err.Error(), http.StatusInternalServerError)
		} else {
			// Send HTTP response as Json
			err = writeJSON(w, http.StatusOK, resp)
			if err != nil {
				log.Errorf("Error generating json. Err: %v", err)
			}
		}
	}
}

// writeJSON: writes the value v to the http response stream as json with standard
// json encoding.
func writeJSON(w http.ResponseWriter, code int, v interface{}) error {
	// Set content type as json
	w.Header().Set("Content-Type", "application/json")

	// write the HTTP status code
	w.WriteHeader(code)

	// Write the Json output
	return json.NewEncoder(w).Encode(v)
}

// Add all routes for REST handlers
func AddRoutes(router *mux.Router) {
	var route, listRoute string

	// Register app
	route = "/api/apps/{key}/"
	listRoute = "/api/apps/"
	log.Infof("Registering %s", route)
	router.Path(listRoute).Methods("GET").HandlerFunc(makeHttpHandler(httpListApps))
	router.Path(route).Methods("GET").HandlerFunc(makeHttpHandler(httpGetApp))
	router.Path(route).Methods("POST").HandlerFunc(makeHttpHandler(httpCreateApp))
	router.Path(route).Methods("PUT").HandlerFunc(makeHttpHandler(httpCreateApp))
	router.Path(route).Methods("DELETE").HandlerFunc(makeHttpHandler(httpDeleteApp))

	// Register endpointGroup
	route = "/api/endpointGroups/{key}/"
	listRoute = "/api/endpointGroups/"
	log.Infof("Registering %s", route)
	router.Path(listRoute).Methods("GET").HandlerFunc(makeHttpHandler(httpListEndpointGroups))
	router.Path(route).Methods("GET").HandlerFunc(makeHttpHandler(httpGetEndpointGroup))
	router.Path(route).Methods("POST").HandlerFunc(makeHttpHandler(httpCreateEndpointGroup))
	router.Path(route).Methods("PUT").HandlerFunc(makeHttpHandler(httpCreateEndpointGroup))
	router.Path(route).Methods("DELETE").HandlerFunc(makeHttpHandler(httpDeleteEndpointGroup))

	// Register network
	route = "/api/networks/{key}/"
	listRoute = "/api/networks/"
	log.Infof("Registering %s", route)
	router.Path(listRoute).Methods("GET").HandlerFunc(makeHttpHandler(httpListNetworks))
	router.Path(route).Methods("GET").HandlerFunc(makeHttpHandler(httpGetNetwork))
	router.Path(route).Methods("POST").HandlerFunc(makeHttpHandler(httpCreateNetwork))
	router.Path(route).Methods("PUT").HandlerFunc(makeHttpHandler(httpCreateNetwork))
	router.Path(route).Methods("DELETE").HandlerFunc(makeHttpHandler(httpDeleteNetwork))

	// Register policy
	route = "/api/policys/{key}/"
	listRoute = "/api/policys/"
	log.Infof("Registering %s", route)
	router.Path(listRoute).Methods("GET").HandlerFunc(makeHttpHandler(httpListPolicys))
	router.Path(route).Methods("GET").HandlerFunc(makeHttpHandler(httpGetPolicy))
	router.Path(route).Methods("POST").HandlerFunc(makeHttpHandler(httpCreatePolicy))
	router.Path(route).Methods("PUT").HandlerFunc(makeHttpHandler(httpCreatePolicy))
	router.Path(route).Methods("DELETE").HandlerFunc(makeHttpHandler(httpDeletePolicy))

	// Register service
	route = "/api/services/{key}/"
	listRoute = "/api/services/"
	log.Infof("Registering %s", route)
	router.Path(listRoute).Methods("GET").HandlerFunc(makeHttpHandler(httpListServices))
	router.Path(route).Methods("GET").HandlerFunc(makeHttpHandler(httpGetService))
	router.Path(route).Methods("POST").HandlerFunc(makeHttpHandler(httpCreateService))
	router.Path(route).Methods("PUT").HandlerFunc(makeHttpHandler(httpCreateService))
	router.Path(route).Methods("DELETE").HandlerFunc(makeHttpHandler(httpDeleteService))

	// Register serviceInstance
	route = "/api/serviceInstances/{key}/"
	listRoute = "/api/serviceInstances/"
	log.Infof("Registering %s", route)
	router.Path(listRoute).Methods("GET").HandlerFunc(makeHttpHandler(httpListServiceInstances))
	router.Path(route).Methods("GET").HandlerFunc(makeHttpHandler(httpGetServiceInstance))
	router.Path(route).Methods("POST").HandlerFunc(makeHttpHandler(httpCreateServiceInstance))
	router.Path(route).Methods("PUT").HandlerFunc(makeHttpHandler(httpCreateServiceInstance))
	router.Path(route).Methods("DELETE").HandlerFunc(makeHttpHandler(httpDeleteServiceInstance))

	// Register tenant
	route = "/api/tenants/{key}/"
	listRoute = "/api/tenants/"
	log.Infof("Registering %s", route)
	router.Path(listRoute).Methods("GET").HandlerFunc(makeHttpHandler(httpListTenants))
	router.Path(route).Methods("GET").HandlerFunc(makeHttpHandler(httpGetTenant))
	router.Path(route).Methods("POST").HandlerFunc(makeHttpHandler(httpCreateTenant))
	router.Path(route).Methods("PUT").HandlerFunc(makeHttpHandler(httpCreateTenant))
	router.Path(route).Methods("DELETE").HandlerFunc(makeHttpHandler(httpDeleteTenant))

	// Register volume
	route = "/api/volumes/{key}/"
	listRoute = "/api/volumes/"
	log.Infof("Registering %s", route)
	router.Path(listRoute).Methods("GET").HandlerFunc(makeHttpHandler(httpListVolumes))
	router.Path(route).Methods("GET").HandlerFunc(makeHttpHandler(httpGetVolume))
	router.Path(route).Methods("POST").HandlerFunc(makeHttpHandler(httpCreateVolume))
	router.Path(route).Methods("PUT").HandlerFunc(makeHttpHandler(httpCreateVolume))
	router.Path(route).Methods("DELETE").HandlerFunc(makeHttpHandler(httpDeleteVolume))

}

// LIST REST call
func httpListApps(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpListApps: %+v", vars)

	var list []*App
	for _, obj := range collections.apps {
		list = append(list, obj)
	}

	// Return the list
	return list, nil
}

// GET REST call
func httpGetApp(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetApp: %+v", vars)

	key := vars["key"]

	obj := collections.apps[key]
	if obj == nil {
		log.Errorf("app %s not found", key)
		return nil, errors.New("app not found")
	}

	// Return the obj
	return obj, nil
}

// CREATE REST call
func httpCreateApp(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetApp: %+v", vars)

	var obj App
	key := vars["key"]

	// Get object from the request
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		log.Errorf("Error decoding app create request. Err %v", err)
		return nil, err
	}

	// set the key
	obj.Key = key

	// Perform callback
	err = objCallbackHandler.AppCreate(&obj)
	if err != nil {
		log.Errorf("AppCreate retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// Write it to modeldb
	err = obj.Write()
	if err != nil {
		log.Errorf("Error saving app %s to db. Err: %v", obj.Key, err)
		return nil, err
	}

	// save it in cache
	collections.apps[key] = &obj

	// Return the obj
	return obj, nil
}

// DELETE rest call
func httpDeleteApp(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpDeleteApp: %+v", vars)

	key := vars["key"]

	obj := collections.apps[key]
	if obj == nil {
		log.Errorf("app %s not found", key)
		return nil, errors.New("app not found")
	}

	// set the key
	obj.Key = key

	// Perform callback
	err := objCallbackHandler.AppDelete(obj)
	if err != nil {
		log.Errorf("AppDelete retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// delete it from modeldb
	err = obj.Delete()
	if err != nil {
		log.Errorf("Error deleting app %s. Err: %v", obj.Key, err)
	}

	// delete it from cache
	delete(collections.apps, key)

	// Return the obj
	return obj, nil
}

// Return a pointer to app from collection
func FindApp(key string) *App {
	obj := collections.apps[key]
	if obj == nil {
		log.Errorf("app %s not found", key)
		return nil
	}

	return obj
}

func (self *App) GetType() string {
	return "app"
}

func (self *App) GetKey() string {
	return self.Key
}

func (self *App) Read() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to read app object")
		return errors.New("Empty key")
	}

	return modeldb.ReadObj("app", self.Key, self)
}

func (self *App) Write() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Write app object")
		return errors.New("Empty key")
	}

	return modeldb.WriteObj("app", self.Key, self)
}

func (self *App) Delete() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Delete app object")
		return errors.New("Empty key")
	}

	return modeldb.DeleteObj("app", self.Key)
}

func restoreApp() error {
	strList, err := modeldb.ReadAllObj("app")
	if err != nil {
		log.Errorf("Error reading app list. Err: %v", err)
	}

	for _, objStr := range strList {
		// Parse the json model
		var app App
		err = json.Unmarshal([]byte(objStr), &app)
		if err != nil {
			log.Errorf("Error parsing object %s, Err %v", objStr, err)
			return err
		}

		// add it to the collection
		collections.apps[app.Key] = &app
	}

	return nil
}

// LIST REST call
func httpListEndpointGroups(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpListEndpointGroups: %+v", vars)

	var list []*EndpointGroup
	for _, obj := range collections.endpointGroups {
		list = append(list, obj)
	}

	// Return the list
	return list, nil
}

// GET REST call
func httpGetEndpointGroup(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetEndpointGroup: %+v", vars)

	key := vars["key"]

	obj := collections.endpointGroups[key]
	if obj == nil {
		log.Errorf("endpointGroup %s not found", key)
		return nil, errors.New("endpointGroup not found")
	}

	// Return the obj
	return obj, nil
}

// CREATE REST call
func httpCreateEndpointGroup(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetEndpointGroup: %+v", vars)

	var obj EndpointGroup
	key := vars["key"]

	// Get object from the request
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		log.Errorf("Error decoding endpointGroup create request. Err %v", err)
		return nil, err
	}

	// set the key
	obj.Key = key

	// Perform callback
	err = objCallbackHandler.EndpointGroupCreate(&obj)
	if err != nil {
		log.Errorf("EndpointGroupCreate retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// Write it to modeldb
	err = obj.Write()
	if err != nil {
		log.Errorf("Error saving endpointGroup %s to db. Err: %v", obj.Key, err)
		return nil, err
	}

	// save it in cache
	collections.endpointGroups[key] = &obj

	// Return the obj
	return obj, nil
}

// DELETE rest call
func httpDeleteEndpointGroup(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpDeleteEndpointGroup: %+v", vars)

	key := vars["key"]

	obj := collections.endpointGroups[key]
	if obj == nil {
		log.Errorf("endpointGroup %s not found", key)
		return nil, errors.New("endpointGroup not found")
	}

	// set the key
	obj.Key = key

	// Perform callback
	err := objCallbackHandler.EndpointGroupDelete(obj)
	if err != nil {
		log.Errorf("EndpointGroupDelete retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// delete it from modeldb
	err = obj.Delete()
	if err != nil {
		log.Errorf("Error deleting endpointGroup %s. Err: %v", obj.Key, err)
	}

	// delete it from cache
	delete(collections.endpointGroups, key)

	// Return the obj
	return obj, nil
}

// Return a pointer to endpointGroup from collection
func FindEndpointGroup(key string) *EndpointGroup {
	obj := collections.endpointGroups[key]
	if obj == nil {
		log.Errorf("endpointGroup %s not found", key)
		return nil
	}

	return obj
}

func (self *EndpointGroup) GetType() string {
	return "endpointGroup"
}

func (self *EndpointGroup) GetKey() string {
	return self.Key
}

func (self *EndpointGroup) Read() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to read endpointGroup object")
		return errors.New("Empty key")
	}

	return modeldb.ReadObj("endpointGroup", self.Key, self)
}

func (self *EndpointGroup) Write() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Write endpointGroup object")
		return errors.New("Empty key")
	}

	return modeldb.WriteObj("endpointGroup", self.Key, self)
}

func (self *EndpointGroup) Delete() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Delete endpointGroup object")
		return errors.New("Empty key")
	}

	return modeldb.DeleteObj("endpointGroup", self.Key)
}

func restoreEndpointGroup() error {
	strList, err := modeldb.ReadAllObj("endpointGroup")
	if err != nil {
		log.Errorf("Error reading endpointGroup list. Err: %v", err)
	}

	for _, objStr := range strList {
		// Parse the json model
		var endpointGroup EndpointGroup
		err = json.Unmarshal([]byte(objStr), &endpointGroup)
		if err != nil {
			log.Errorf("Error parsing object %s, Err %v", objStr, err)
			return err
		}

		// add it to the collection
		collections.endpointGroups[endpointGroup.Key] = &endpointGroup
	}

	return nil
}

// LIST REST call
func httpListNetworks(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpListNetworks: %+v", vars)

	var list []*Network
	for _, obj := range collections.networks {
		list = append(list, obj)
	}

	// Return the list
	return list, nil
}

// GET REST call
func httpGetNetwork(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetNetwork: %+v", vars)

	key := vars["key"]

	obj := collections.networks[key]
	if obj == nil {
		log.Errorf("network %s not found", key)
		return nil, errors.New("network not found")
	}

	// Return the obj
	return obj, nil
}

// CREATE REST call
func httpCreateNetwork(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetNetwork: %+v", vars)

	var obj Network
	key := vars["key"]

	// Get object from the request
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		log.Errorf("Error decoding network create request. Err %v", err)
		return nil, err
	}

	// set the key
	obj.Key = key

	// Perform callback
	err = objCallbackHandler.NetworkCreate(&obj)
	if err != nil {
		log.Errorf("NetworkCreate retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// Write it to modeldb
	err = obj.Write()
	if err != nil {
		log.Errorf("Error saving network %s to db. Err: %v", obj.Key, err)
		return nil, err
	}

	// save it in cache
	collections.networks[key] = &obj

	// Return the obj
	return obj, nil
}

// DELETE rest call
func httpDeleteNetwork(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpDeleteNetwork: %+v", vars)

	key := vars["key"]

	obj := collections.networks[key]
	if obj == nil {
		log.Errorf("network %s not found", key)
		return nil, errors.New("network not found")
	}

	// set the key
	obj.Key = key

	// Perform callback
	err := objCallbackHandler.NetworkDelete(obj)
	if err != nil {
		log.Errorf("NetworkDelete retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// delete it from modeldb
	err = obj.Delete()
	if err != nil {
		log.Errorf("Error deleting network %s. Err: %v", obj.Key, err)
	}

	// delete it from cache
	delete(collections.networks, key)

	// Return the obj
	return obj, nil
}

// Return a pointer to network from collection
func FindNetwork(key string) *Network {
	obj := collections.networks[key]
	if obj == nil {
		log.Errorf("network %s not found", key)
		return nil
	}

	return obj
}

func (self *Network) GetType() string {
	return "network"
}

func (self *Network) GetKey() string {
	return self.Key
}

func (self *Network) Read() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to read network object")
		return errors.New("Empty key")
	}

	return modeldb.ReadObj("network", self.Key, self)
}

func (self *Network) Write() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Write network object")
		return errors.New("Empty key")
	}

	return modeldb.WriteObj("network", self.Key, self)
}

func (self *Network) Delete() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Delete network object")
		return errors.New("Empty key")
	}

	return modeldb.DeleteObj("network", self.Key)
}

func restoreNetwork() error {
	strList, err := modeldb.ReadAllObj("network")
	if err != nil {
		log.Errorf("Error reading network list. Err: %v", err)
	}

	for _, objStr := range strList {
		// Parse the json model
		var network Network
		err = json.Unmarshal([]byte(objStr), &network)
		if err != nil {
			log.Errorf("Error parsing object %s, Err %v", objStr, err)
			return err
		}

		// add it to the collection
		collections.networks[network.Key] = &network
	}

	return nil
}

// LIST REST call
func httpListPolicys(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpListPolicys: %+v", vars)

	var list []*Policy
	for _, obj := range collections.policys {
		list = append(list, obj)
	}

	// Return the list
	return list, nil
}

// GET REST call
func httpGetPolicy(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetPolicy: %+v", vars)

	key := vars["key"]

	obj := collections.policys[key]
	if obj == nil {
		log.Errorf("policy %s not found", key)
		return nil, errors.New("policy not found")
	}

	// Return the obj
	return obj, nil
}

// CREATE REST call
func httpCreatePolicy(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetPolicy: %+v", vars)

	var obj Policy
	key := vars["key"]

	// Get object from the request
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		log.Errorf("Error decoding policy create request. Err %v", err)
		return nil, err
	}

	// set the key
	obj.Key = key

	// Perform callback
	err = objCallbackHandler.PolicyCreate(&obj)
	if err != nil {
		log.Errorf("PolicyCreate retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// Write it to modeldb
	err = obj.Write()
	if err != nil {
		log.Errorf("Error saving policy %s to db. Err: %v", obj.Key, err)
		return nil, err
	}

	// save it in cache
	collections.policys[key] = &obj

	// Return the obj
	return obj, nil
}

// DELETE rest call
func httpDeletePolicy(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpDeletePolicy: %+v", vars)

	key := vars["key"]

	obj := collections.policys[key]
	if obj == nil {
		log.Errorf("policy %s not found", key)
		return nil, errors.New("policy not found")
	}

	// set the key
	obj.Key = key

	// Perform callback
	err := objCallbackHandler.PolicyDelete(obj)
	if err != nil {
		log.Errorf("PolicyDelete retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// delete it from modeldb
	err = obj.Delete()
	if err != nil {
		log.Errorf("Error deleting policy %s. Err: %v", obj.Key, err)
	}

	// delete it from cache
	delete(collections.policys, key)

	// Return the obj
	return obj, nil
}

// Return a pointer to policy from collection
func FindPolicy(key string) *Policy {
	obj := collections.policys[key]
	if obj == nil {
		log.Errorf("policy %s not found", key)
		return nil
	}

	return obj
}

func (self *Policy) GetType() string {
	return "policy"
}

func (self *Policy) GetKey() string {
	return self.Key
}

func (self *Policy) Read() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to read policy object")
		return errors.New("Empty key")
	}

	return modeldb.ReadObj("policy", self.Key, self)
}

func (self *Policy) Write() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Write policy object")
		return errors.New("Empty key")
	}

	return modeldb.WriteObj("policy", self.Key, self)
}

func (self *Policy) Delete() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Delete policy object")
		return errors.New("Empty key")
	}

	return modeldb.DeleteObj("policy", self.Key)
}

func restorePolicy() error {
	strList, err := modeldb.ReadAllObj("policy")
	if err != nil {
		log.Errorf("Error reading policy list. Err: %v", err)
	}

	for _, objStr := range strList {
		// Parse the json model
		var policy Policy
		err = json.Unmarshal([]byte(objStr), &policy)
		if err != nil {
			log.Errorf("Error parsing object %s, Err %v", objStr, err)
			return err
		}

		// add it to the collection
		collections.policys[policy.Key] = &policy
	}

	return nil
}

// LIST REST call
func httpListServices(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpListServices: %+v", vars)

	var list []*Service
	for _, obj := range collections.services {
		list = append(list, obj)
	}

	// Return the list
	return list, nil
}

// GET REST call
func httpGetService(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetService: %+v", vars)

	key := vars["key"]

	obj := collections.services[key]
	if obj == nil {
		log.Errorf("service %s not found", key)
		return nil, errors.New("service not found")
	}

	// Return the obj
	return obj, nil
}

// CREATE REST call
func httpCreateService(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetService: %+v", vars)

	var obj Service
	key := vars["key"]

	// Get object from the request
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		log.Errorf("Error decoding service create request. Err %v", err)
		return nil, err
	}

	// set the key
	obj.Key = key

	// Perform callback
	err = objCallbackHandler.ServiceCreate(&obj)
	if err != nil {
		log.Errorf("ServiceCreate retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// Write it to modeldb
	err = obj.Write()
	if err != nil {
		log.Errorf("Error saving service %s to db. Err: %v", obj.Key, err)
		return nil, err
	}

	// save it in cache
	collections.services[key] = &obj

	// Return the obj
	return obj, nil
}

// DELETE rest call
func httpDeleteService(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpDeleteService: %+v", vars)

	key := vars["key"]

	obj := collections.services[key]
	if obj == nil {
		log.Errorf("service %s not found", key)
		return nil, errors.New("service not found")
	}

	// set the key
	obj.Key = key

	// Perform callback
	err := objCallbackHandler.ServiceDelete(obj)
	if err != nil {
		log.Errorf("ServiceDelete retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// delete it from modeldb
	err = obj.Delete()
	if err != nil {
		log.Errorf("Error deleting service %s. Err: %v", obj.Key, err)
	}

	// delete it from cache
	delete(collections.services, key)

	// Return the obj
	return obj, nil
}

// Return a pointer to service from collection
func FindService(key string) *Service {
	obj := collections.services[key]
	if obj == nil {
		log.Errorf("service %s not found", key)
		return nil
	}

	return obj
}

func (self *Service) GetType() string {
	return "service"
}

func (self *Service) GetKey() string {
	return self.Key
}

func (self *Service) Read() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to read service object")
		return errors.New("Empty key")
	}

	return modeldb.ReadObj("service", self.Key, self)
}

func (self *Service) Write() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Write service object")
		return errors.New("Empty key")
	}

	return modeldb.WriteObj("service", self.Key, self)
}

func (self *Service) Delete() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Delete service object")
		return errors.New("Empty key")
	}

	return modeldb.DeleteObj("service", self.Key)
}

func restoreService() error {
	strList, err := modeldb.ReadAllObj("service")
	if err != nil {
		log.Errorf("Error reading service list. Err: %v", err)
	}

	for _, objStr := range strList {
		// Parse the json model
		var service Service
		err = json.Unmarshal([]byte(objStr), &service)
		if err != nil {
			log.Errorf("Error parsing object %s, Err %v", objStr, err)
			return err
		}

		// add it to the collection
		collections.services[service.Key] = &service
	}

	return nil
}

// LIST REST call
func httpListServiceInstances(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpListServiceInstances: %+v", vars)

	var list []*ServiceInstance
	for _, obj := range collections.serviceInstances {
		list = append(list, obj)
	}

	// Return the list
	return list, nil
}

// GET REST call
func httpGetServiceInstance(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetServiceInstance: %+v", vars)

	key := vars["key"]

	obj := collections.serviceInstances[key]
	if obj == nil {
		log.Errorf("serviceInstance %s not found", key)
		return nil, errors.New("serviceInstance not found")
	}

	// Return the obj
	return obj, nil
}

// CREATE REST call
func httpCreateServiceInstance(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetServiceInstance: %+v", vars)

	var obj ServiceInstance
	key := vars["key"]

	// Get object from the request
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		log.Errorf("Error decoding serviceInstance create request. Err %v", err)
		return nil, err
	}

	// set the key
	obj.Key = key

	// Perform callback
	err = objCallbackHandler.ServiceInstanceCreate(&obj)
	if err != nil {
		log.Errorf("ServiceInstanceCreate retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// Write it to modeldb
	err = obj.Write()
	if err != nil {
		log.Errorf("Error saving serviceInstance %s to db. Err: %v", obj.Key, err)
		return nil, err
	}

	// save it in cache
	collections.serviceInstances[key] = &obj

	// Return the obj
	return obj, nil
}

// DELETE rest call
func httpDeleteServiceInstance(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpDeleteServiceInstance: %+v", vars)

	key := vars["key"]

	obj := collections.serviceInstances[key]
	if obj == nil {
		log.Errorf("serviceInstance %s not found", key)
		return nil, errors.New("serviceInstance not found")
	}

	// set the key
	obj.Key = key

	// Perform callback
	err := objCallbackHandler.ServiceInstanceDelete(obj)
	if err != nil {
		log.Errorf("ServiceInstanceDelete retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// delete it from modeldb
	err = obj.Delete()
	if err != nil {
		log.Errorf("Error deleting serviceInstance %s. Err: %v", obj.Key, err)
	}

	// delete it from cache
	delete(collections.serviceInstances, key)

	// Return the obj
	return obj, nil
}

// Return a pointer to serviceInstance from collection
func FindServiceInstance(key string) *ServiceInstance {
	obj := collections.serviceInstances[key]
	if obj == nil {
		log.Errorf("serviceInstance %s not found", key)
		return nil
	}

	return obj
}

func (self *ServiceInstance) GetType() string {
	return "serviceInstance"
}

func (self *ServiceInstance) GetKey() string {
	return self.Key
}

func (self *ServiceInstance) Read() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to read serviceInstance object")
		return errors.New("Empty key")
	}

	return modeldb.ReadObj("serviceInstance", self.Key, self)
}

func (self *ServiceInstance) Write() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Write serviceInstance object")
		return errors.New("Empty key")
	}

	return modeldb.WriteObj("serviceInstance", self.Key, self)
}

func (self *ServiceInstance) Delete() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Delete serviceInstance object")
		return errors.New("Empty key")
	}

	return modeldb.DeleteObj("serviceInstance", self.Key)
}

func restoreServiceInstance() error {
	strList, err := modeldb.ReadAllObj("serviceInstance")
	if err != nil {
		log.Errorf("Error reading serviceInstance list. Err: %v", err)
	}

	for _, objStr := range strList {
		// Parse the json model
		var serviceInstance ServiceInstance
		err = json.Unmarshal([]byte(objStr), &serviceInstance)
		if err != nil {
			log.Errorf("Error parsing object %s, Err %v", objStr, err)
			return err
		}

		// add it to the collection
		collections.serviceInstances[serviceInstance.Key] = &serviceInstance
	}

	return nil
}

// LIST REST call
func httpListTenants(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpListTenants: %+v", vars)

	var list []*Tenant
	for _, obj := range collections.tenants {
		list = append(list, obj)
	}

	// Return the list
	return list, nil
}

// GET REST call
func httpGetTenant(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetTenant: %+v", vars)

	key := vars["key"]

	obj := collections.tenants[key]
	if obj == nil {
		log.Errorf("tenant %s not found", key)
		return nil, errors.New("tenant not found")
	}

	// Return the obj
	return obj, nil
}

// CREATE REST call
func httpCreateTenant(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetTenant: %+v", vars)

	var obj Tenant
	key := vars["key"]

	// Get object from the request
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		log.Errorf("Error decoding tenant create request. Err %v", err)
		return nil, err
	}

	// set the key
	obj.Key = key

	// Perform callback
	err = objCallbackHandler.TenantCreate(&obj)
	if err != nil {
		log.Errorf("TenantCreate retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// Write it to modeldb
	err = obj.Write()
	if err != nil {
		log.Errorf("Error saving tenant %s to db. Err: %v", obj.Key, err)
		return nil, err
	}

	// save it in cache
	collections.tenants[key] = &obj

	// Return the obj
	return obj, nil
}

// DELETE rest call
func httpDeleteTenant(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpDeleteTenant: %+v", vars)

	key := vars["key"]

	obj := collections.tenants[key]
	if obj == nil {
		log.Errorf("tenant %s not found", key)
		return nil, errors.New("tenant not found")
	}

	// set the key
	obj.Key = key

	// Perform callback
	err := objCallbackHandler.TenantDelete(obj)
	if err != nil {
		log.Errorf("TenantDelete retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// delete it from modeldb
	err = obj.Delete()
	if err != nil {
		log.Errorf("Error deleting tenant %s. Err: %v", obj.Key, err)
	}

	// delete it from cache
	delete(collections.tenants, key)

	// Return the obj
	return obj, nil
}

// Return a pointer to tenant from collection
func FindTenant(key string) *Tenant {
	obj := collections.tenants[key]
	if obj == nil {
		log.Errorf("tenant %s not found", key)
		return nil
	}

	return obj
}

func (self *Tenant) GetType() string {
	return "tenant"
}

func (self *Tenant) GetKey() string {
	return self.Key
}

func (self *Tenant) Read() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to read tenant object")
		return errors.New("Empty key")
	}

	return modeldb.ReadObj("tenant", self.Key, self)
}

func (self *Tenant) Write() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Write tenant object")
		return errors.New("Empty key")
	}

	return modeldb.WriteObj("tenant", self.Key, self)
}

func (self *Tenant) Delete() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Delete tenant object")
		return errors.New("Empty key")
	}

	return modeldb.DeleteObj("tenant", self.Key)
}

func restoreTenant() error {
	strList, err := modeldb.ReadAllObj("tenant")
	if err != nil {
		log.Errorf("Error reading tenant list. Err: %v", err)
	}

	for _, objStr := range strList {
		// Parse the json model
		var tenant Tenant
		err = json.Unmarshal([]byte(objStr), &tenant)
		if err != nil {
			log.Errorf("Error parsing object %s, Err %v", objStr, err)
			return err
		}

		// add it to the collection
		collections.tenants[tenant.Key] = &tenant
	}

	return nil
}

// LIST REST call
func httpListVolumes(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpListVolumes: %+v", vars)

	var list []*Volume
	for _, obj := range collections.volumes {
		list = append(list, obj)
	}

	// Return the list
	return list, nil
}

// GET REST call
func httpGetVolume(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetVolume: %+v", vars)

	key := vars["key"]

	obj := collections.volumes[key]
	if obj == nil {
		log.Errorf("volume %s not found", key)
		return nil, errors.New("volume not found")
	}

	// Return the obj
	return obj, nil
}

// CREATE REST call
func httpCreateVolume(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGetVolume: %+v", vars)

	var obj Volume
	key := vars["key"]

	// Get object from the request
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		log.Errorf("Error decoding volume create request. Err %v", err)
		return nil, err
	}

	// set the key
	obj.Key = key

	// Perform callback
	err = objCallbackHandler.VolumeCreate(&obj)
	if err != nil {
		log.Errorf("VolumeCreate retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// Write it to modeldb
	err = obj.Write()
	if err != nil {
		log.Errorf("Error saving volume %s to db. Err: %v", obj.Key, err)
		return nil, err
	}

	// save it in cache
	collections.volumes[key] = &obj

	// Return the obj
	return obj, nil
}

// DELETE rest call
func httpDeleteVolume(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpDeleteVolume: %+v", vars)

	key := vars["key"]

	obj := collections.volumes[key]
	if obj == nil {
		log.Errorf("volume %s not found", key)
		return nil, errors.New("volume not found")
	}

	// set the key
	obj.Key = key

	// Perform callback
	err := objCallbackHandler.VolumeDelete(obj)
	if err != nil {
		log.Errorf("VolumeDelete retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// delete it from modeldb
	err = obj.Delete()
	if err != nil {
		log.Errorf("Error deleting volume %s. Err: %v", obj.Key, err)
	}

	// delete it from cache
	delete(collections.volumes, key)

	// Return the obj
	return obj, nil
}

// Return a pointer to volume from collection
func FindVolume(key string) *Volume {
	obj := collections.volumes[key]
	if obj == nil {
		log.Errorf("volume %s not found", key)
		return nil
	}

	return obj
}

func (self *Volume) GetType() string {
	return "volume"
}

func (self *Volume) GetKey() string {
	return self.Key
}

func (self *Volume) Read() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to read volume object")
		return errors.New("Empty key")
	}

	return modeldb.ReadObj("volume", self.Key, self)
}

func (self *Volume) Write() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Write volume object")
		return errors.New("Empty key")
	}

	return modeldb.WriteObj("volume", self.Key, self)
}

func (self *Volume) Delete() error {
	if self.Key == "" {
		log.Errorf("Empty key while trying to Delete volume object")
		return errors.New("Empty key")
	}

	return modeldb.DeleteObj("volume", self.Key)
}

func restoreVolume() error {
	strList, err := modeldb.ReadAllObj("volume")
	if err != nil {
		log.Errorf("Error reading volume list. Err: %v", err)
	}

	for _, objStr := range strList {
		// Parse the json model
		var volume Volume
		err = json.Unmarshal([]byte(objStr), &volume)
		if err != nil {
			log.Errorf("Error parsing object %s, Err %v", objStr, err)
			return err
		}

		// add it to the collection
		collections.volumes[volume.Key] = &volume
	}

	return nil
}

