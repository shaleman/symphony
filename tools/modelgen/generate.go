/***
Copyright 2014 Cisco Systems Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"fmt"
	"errors"
	"strings"
	"regexp"
	"bytes"
	"unicode"
	"unicode/utf8"
	"text/template"

	log "github.com/Sirupsen/logrus"
)


// GenerateGoStructs generates go code from a schema
func (s *Schema) GenerateGoStructs() (string, error) {
	var goStr string

	//  Generate all object definitions
	for _, obj := range s.Objects {
		objStr, err := obj.GenerateGoStructs()
		if err == nil {
			goStr = goStr + objStr
		}
	}

	// Generate a collection definitions to store the objects
	goStr = goStr + fmt.Sprintf("\n\ntype Collections struct {\n")
	for _, obj := range s.Objects {
		goStr = goStr + fmt.Sprintf("	%ss    map[string]*%s\n", obj.Name, initialCap(obj.Name))
	}
	goStr = goStr + fmt.Sprintf("}\n\n")

	goStr = goStr + fmt.Sprintf("var collections Collections\n\n")

	// Generate callback interface
	goStr = goStr + fmt.Sprintf("type Callbacks interface {\n")
	for _, obj := range s.Objects {
		goStr = goStr + fmt.Sprintf("	%sCreate(%s *%s) error\n", initialCap(obj.Name), obj.Name, initialCap(obj.Name))
		goStr = goStr + fmt.Sprintf("	%sDelete(%s *%s) error\n", initialCap(obj.Name), obj.Name, initialCap(obj.Name))
	}
	goStr = goStr + fmt.Sprintf("}\n\n")

	goStr = goStr + fmt.Sprintf("var objCallbackHandler Callbacks\n\n")


	// Generate an Init function
	goStr = goStr + fmt.Sprintf("\nfunc Init(handler Callbacks) {\n")
	goStr = goStr + fmt.Sprintf("objCallbackHandler = handler\n\n")
	for _, obj := range s.Objects {
		goStr = goStr + fmt.Sprintf("	collections.%ss = make(map[string]*%s)\n", obj.Name, initialCap(obj.Name))
	}
	goStr = goStr + fmt.Sprintf("}\n\n")

	return goStr, nil
}

// GenerateGoHdrs generates go file headers
func (s *Schema) GenerateGoHdrs() string {
	var buf bytes.Buffer

	const hdr = `// This file is auto generated by modelgen tool
// Do not edit this file manually

package {{.Name}}

import (
	"errors"
	"net/http"
	"encoding/json"
	"github.com/gorilla/mux"
	log "github.com/Sirupsen/logrus"
)

type HttpApiFunc func(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error)

`

	tmpl := template.Must(template.New("hdr").Parse(hdr))
	err := tmpl.Execute(&buf, s)
	if err != nil {
		log.Errorf("Error executing template. Err: %v", err)
		return ""
	}
/*
	goStr = goStr + fmt.Sprintf("// This file is auto generated by modelgen tool\n")
	goStr = goStr + fmt.Sprintf("// Do not edit this file manually\n\n")
	goStr = goStr + fmt.Sprintf("package %s\n", s.Name)
	goStr = goStr + fmt.Sprintf("import (\n")
	goStr = goStr + fmt.Sprintf("\"github.com/gorilla/mux\"\n")
	goStr = goStr + fmt.Sprintf(")\n\n\n")
*/

	return buf.String()
}

func (s *Schema) GenerateGoRestHandlers() string {
	routeFunc := `
// Simple Wrapper for http handlers
func makeHttpHandler(handlerFunc HttpApiFunc) http.HandlerFunc {
	// Create a closure and return an anonymous function
	return func(w http.ResponseWriter, r *http.Request) {
		// Call the handler
		resp, err := handlerFunc(w, r, mux.Vars(r))
		if err != nil {
			// Log error
			log.Errorf("Handler for %s %s returned error: %s", r.Method, r.URL, err)

			// Send HTTP response
			http.Error(w, err.Error(), http.StatusInternalServerError)
		} else {
			// Send HTTP response as Json
			err = writeJSON(w, http.StatusOK, resp)
			if err != nil {
				log.Errorf("Error generating json. Err: %v", err)
			}
		}
	}
}

// writeJSON: writes the value v to the http response stream as json with standard
// json encoding.
func writeJSON(w http.ResponseWriter, code int, v interface{}) error {
	// Set content type as json
	w.Header().Set("Content-Type", "application/json")

	// write the HTTP status code
	w.WriteHeader(code)

	// Write the Json output
	return json.NewEncoder(w).Encode(v)
}

// Add all routes for REST handlers
func AddRoutes(router *mux.Router) {
	var route, listRoute string
`
	funcMap := template.FuncMap{
		"initialCap": initialCap,
	}
	routeTmpl := `
	// Register {{.}}
	route = "/api/{{.}}s/{key}/"
	listRoute = "/api/{{.}}s/"
	log.Infof("Registering %s", route)
	router.Path(listRoute).Methods("GET").HandlerFunc(makeHttpHandler(httpList{{initialCap .}}s))
	router.Path(route).Methods("GET").HandlerFunc(makeHttpHandler(httpGet{{initialCap .}}))
	router.Path(route).Methods("POST").HandlerFunc(makeHttpHandler(httpCreate{{initialCap .}}))
	router.Path(route).Methods("PUT").HandlerFunc(makeHttpHandler(httpCreate{{initialCap .}}))
	router.Path(route).Methods("DELETE").HandlerFunc(makeHttpHandler(httpDelete{{initialCap .}}))
`
	// Output the functions and routes
	goStr := fmt.Sprintf(routeFunc)

	// add a path for each object
	for _, obj := range s.Objects {
		var buf bytes.Buffer
		// Create a template, add the function map, and parse the text.
		tmpl, err := template.New("routeTmpl").Funcs(funcMap).Parse(routeTmpl)
		if err != nil {
			log.Fatalf("parsing: %s", err)
		}

		// Run the template.
		err = tmpl.Execute(&buf, obj.Name)
		if err != nil {
			log.Fatalf("execution: %s", err)
		}

		goStr = goStr + buf.String()
	}

	goStr = goStr + fmt.Sprintf("\n}\n")

	// template for handler functions
	handlerFuncs := `
// LIST REST call
func httpList{{initialCap .}}s(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpList{{initialCap .}}s: %+v", vars)

	var list []*{{initialCap .}}
	for _, obj := range collections.{{.}}s {
		list = append(list, obj)
	}

	// Return the list
	return list, nil
}

// GET REST call
func httpGet{{initialCap .}}(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGet{{initialCap .}}: %+v", vars)

	key := vars["key"]

	obj := collections.{{.}}s[key]
	if obj == nil {
		log.Errorf("{{.}} %s not found", key)
		return nil, errors.New("{{.}} not found")
	}

	// Return the obj
	return obj, nil
}

// CREATE REST call
func httpCreate{{initialCap .}}(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpGet{{initialCap .}}: %+v", vars)

	var obj {{initialCap .}}
	key := vars["key"]

	// Get object from the request
	err := json.NewDecoder(r.Body).Decode(&obj)
	if err != nil {
		log.Errorf("Error decoding {{.}} create request. Err %v", err)
		return nil, err
	}

	// set the key
	obj.Key = key

	// Perform callback
	err = objCallbackHandler.{{initialCap .}}Create(&obj)
	if err != nil {
		log.Errorf("{{initialCap .}}Create retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// save it
	collections.{{.}}s[key] = &obj

	// Return the obj
	return obj, nil
}

// DELETE rest call
func httpDelete{{initialCap .}}(w http.ResponseWriter, r *http.Request, vars map[string]string) (interface{}, error) {
	log.Debugf("Received httpDelete{{initialCap .}}: %+v", vars)

	key := vars["key"]

	obj := collections.{{.}}s[key]
	if obj == nil {
		log.Errorf("{{.}} %s not found", key)
		return nil, errors.New("{{.}} not found")
	}

	// set the key
	obj.Key = key
	
	// Perform callback
	err := objCallbackHandler.{{initialCap .}}Delete(obj)
	if err != nil {
		log.Errorf("{{initialCap .}}Delete retruned error for: %+v. Err: %v", obj, err)
		return nil, err
	}

	// delete it
	delete(collections.{{.}}s, key)

	// Return the obj
	return obj, nil
}
`
	// Generate REST handlers for each object
	for _, obj := range s.Objects {
		var buf bytes.Buffer
		// Create a template, add the function map, and parse the text.
		tmpl, err := template.New("routeTmpl").Funcs(funcMap).Parse(handlerFuncs)
		if err != nil {
			log.Fatalf("parsing: %s", err)
		}

		// Run the template.
		err = tmpl.Execute(&buf, obj.Name)
		if err != nil {
			log.Fatalf("execution: %s", err)
		}

		goStr = goStr + buf.String()
	}

	return goStr
}

func (obj *Object) GenerateGoStructs() (string, error) {
	var goStr string

	objName := initialCap(obj.Name)
	goStr = goStr + fmt.Sprintf("type %s struct {\n", objName)

	// every object has a key
	goStr = goStr + fmt.Sprintf("	Key		string\n")

	// Walk each property and generate code for it
	for _, prop := range obj.Properties {
		propStr, err := prop.GenerateGoStructs()
		if err == nil {
			goStr = goStr + propStr
		}
	}

	// add link-sets
	if (len(obj.LinkSets) > 0) {
		goStr = goStr + fmt.Sprintf("	LinkSets	%sLinkSets		`json:\"link-sets,omitempty\"`\n", objName)
	}

	// add links
	if (len(obj.Links) > 0) {
		goStr = goStr + fmt.Sprintf("	Links	%sLinks		`json:\"links,omitempty\"`\n", objName)
	}

	goStr = goStr + fmt.Sprintf("}\n\n")

	// define object's linkset
	if (len(obj.LinkSets) > 0) {
		goStr = goStr + fmt.Sprintf("type %sLinkSets struct {\n", objName)
		for lsName, ls := range obj.LinkSets {
			goStr = goStr + fmt.Sprintf("	%s	[]%sLinkSet		`json:\"%s,omitempty\"`\n", initialCap(lsName), ls.Name, lsName)
		}
		goStr = goStr + fmt.Sprintf("}\n\n")
	}

	// Define each link-sets
	for _, linkSet := range obj.LinkSets {
		subStr, err := linkSet.GenerateGoStructs()
		if err == nil {
			goStr = goStr + subStr
		}
	}

	// Define object's links
	if (len(obj.Links) > 0) {
		goStr = goStr + fmt.Sprintf("type %sLinks struct {\n", objName)
		for lName, link := range obj.Links {
			goStr = goStr + fmt.Sprintf("	%s	%sLink		`json:\"%s,omitempty\"`\n", initialCap(lName), link.Name, lName)
		}
		goStr = goStr + fmt.Sprintf("}\n\n")
	}

	// define each link
	for _, link := range obj.Links {
		subStr, err := link.GenerateGoStructs()
		if err == nil {
			goStr = goStr + subStr
		}
	}

	return goStr, nil
}

func (ls *LinkSet) GenerateGoStructs() (string, error) {
	var goStr string

	goStr = goStr + fmt.Sprintf("type %sLinkSet struct {\n", ls.Name)
	goStr = goStr + fmt.Sprintf("	Type	string\n")
	goStr = goStr + fmt.Sprintf("	Key		string\n")
	goStr = goStr + fmt.Sprintf("	%s		*%s\n", ls.Ref, initialCap(ls.Ref))
	goStr = goStr + fmt.Sprintf("}\n\n")

	return goStr, nil
}

func (link *Link) GenerateGoStructs() (string, error) {
	var goStr string

	goStr = goStr + fmt.Sprintf("type %sLink struct {\n", link.Name)
	goStr = goStr + fmt.Sprintf("	Type	string\n")
	goStr = goStr + fmt.Sprintf("	Key		string\n")
	goStr = goStr + fmt.Sprintf("	%s		*%s\n", link.Ref, initialCap(link.Ref))
	goStr = goStr + fmt.Sprintf("}\n\n")

	return goStr, nil
}

func (prop *Property) GenerateGoStructs() (string, error) {
	var goStr string

	goStr = fmt.Sprintf("	%s	", prop.Name)
	switch prop.Type {
		case "string":
			goStr = goStr + fmt.Sprintf("string\n",)
		case "number":
			goStr = goStr + fmt.Sprintf("float64\n",)
		case "integer":
			goStr = goStr + fmt.Sprintf("int64\n",)
		case "bool":
			goStr = goStr + fmt.Sprintf("bool\n",)
		default:
			return "", errors.New("Unknown Property")
	}

	return goStr, nil
}


/*********************** Helper funcs *************************/
var (
	newlines  = regexp.MustCompile(`(?m:\s*$)`)
	acronyms  = regexp.MustCompile(`(Url|Http|Id|Io|Uuid|Api|Uri|Ssl|Cname|Oauth|Otp)$`)
	camelcase = regexp.MustCompile(`(?m)[-.$/:_{}\s]`)
)

func initialCap(ident string) string {
	if ident == "" {
		panic("blank identifier")
	}
	return depunct(ident, true)
}

func initialLow(ident string) string {
	if ident == "" {
		panic("blank identifier")
	}
	return depunct(ident, false)
}

func depunct(ident string, initialCap bool) string {
	matches := camelcase.Split(ident, -1)
	for i, m := range matches {
		if initialCap || i > 0 {
			m = capFirst(m)
		}
		matches[i] = acronyms.ReplaceAllStringFunc(m, func(c string) string {
			if len(c) > 4 {
				return strings.ToUpper(c[:2]) + c[2:]
			}
			return strings.ToUpper(c)
		})
	}
	return strings.Join(matches, "")
}

func capFirst(ident string) string {
	r, n := utf8.DecodeRuneInString(ident)
	return string(unicode.ToUpper(r)) + ident[n:]
}
